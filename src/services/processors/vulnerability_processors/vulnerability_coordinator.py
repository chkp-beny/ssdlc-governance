"""
VulnerabilityCoordinator - Coordinates loading of vulnerabilities from different sources

This module orchestrates the loading of vulnerability data from various sources
(JFrog, SonarQube) using specialized processor services.
"""

import logging
from typing import List

logger = logging.getLogger(__name__)


class VulnerabilityCoordinator:
    """Coordinates vulnerability loading from multiple sources"""
    
    def __init__(self, product_name: str, organization_id: str):
        """
        Initialize VulnerabilityCoordinator
        
        Args:
            product_name (str): Product name for configuration lookup
            organization_id (str): Organization ID for API calls
        """
        self.product_name = product_name
        self.organization_id = organization_id
        self.sonar_processor = None
        self.jfrog_processor = None
        self._initialize_processors()
    
    def _initialize_processors(self):
        """Initialize vulnerability processors"""
        try:
            from .sonar_vulnerability_processor import SonarVulnerabilityProcessor
            self.sonar_processor = SonarVulnerabilityProcessor(
                self.product_name, self.organization_id
            )
            logger.debug("SonarVulnerabilityProcessor initialized")
            
            from .jfrog_vulnerability_processor import JfrogVulnerabilityProcessor
            self.jfrog_processor = JfrogVulnerabilityProcessor(
                self.product_name, self.organization_id
            )
            logger.debug("JfrogVulnerabilityProcessor initialized")
            
        except ImportError as e:
            logger.error("Failed to initialize vulnerability processors: %s", str(e))
    
    def load_all_vulnerabilities(self, repositories: List) -> dict:
        """
        Load all vulnerability data for repositories
        
        Args:
            repositories (List): List of repository objects to update
            
        Returns:
            dict: Summary of vulnerability loading results
        """
        logger.info("Loading vulnerability data for product '%s'", self.product_name)
        
        results = {
            'jfrog_updated': 0,
            'sonar_updated': 0,
            'total_repos': len(repositories)
        }
        
        # Load JFrog vulnerabilities
        if self.jfrog_processor:
            results['jfrog_updated'] = self.jfrog_processor.process_vulnerabilities(repositories)
        else:
            logger.warning("JfrogVulnerabilityProcessor not available, skipping JFrog vulnerability loading")
        
        # Load Sonar vulnerabilities
        if self.sonar_processor:
            results['sonar_updated'] = self.sonar_processor.process_vulnerabilities(repositories)
        else:
            logger.warning("SonarVulnerabilityProcessor not available, skipping Sonar vulnerability loading")
        
        logger.info("Vulnerability data loading completed for product '%s': JFrog=%d, Sonar=%d repos updated", 
                   self.product_name, results['jfrog_updated'], results['sonar_updated'])
        
        return results
